from email.mime.text import MIMEText
from google.oauth2.credentials import Credentials
from google_auth_oauthlib.flow import InstalledAppFlow
from google.auth.transport.requests import Request
from googleapiclient.discovery import build

import re
import os
import base64
import openai


def generate_email(prompt, api_key):
    # Set up OpenAI API client
    openai.api_key = api_key
    model_engine = "text-davinci-002"

    # Generate email with OpenAI GPT-3
    try:
        response = openai.Completion.create(
            engine=model_engine,
            prompt=prompt,
            max_tokens=1024,
            n=1,
            stop=None,
            temperature=0.7,
        )
    except openai.error.OpenAIError:
        print("Error generating email with OpenAI.")
        return None

    # Extract email from OpenAI response
    try:
        email = response.choices[0].text.strip()
    except IndexError:
        print("Error extracting email from OpenAI response.")
        return None

    return email


if __name__ == "__main__":
    prompt = input("Enter a prompt for the email: ")
    api_key = os.environ.get("OPENAI_API_KEY")

    if api_key is None:
        print("API key not found. Please set the 'OPENAI_API_KEY' environment variable.")
        exit(1)

    # Generate initial email content with OpenAI
    email_content = generate_email(prompt, api_key)

    if email_content is None:
        print("Unable to generate email content.")
        exit(1)

    # Print the email content to the console
    print("Generated email content:\n%s\n" % email_content)

    # Create Gmail API client and authenticate
    credentials = None
    if os.path.exists('token.json'):
        credentials = Credentials.from_authorized_user_file('token.json', ['https://www.googleapis.com/auth/gmail.compose'])

    if not credentials or not credentials.valid:
        if credentials and credentials.expired and credentials.refresh_token:
            credentials.refresh(Request())
        else:
            flow = InstalledAppFlow.from_client_secrets_file(
                os.environ.get('CREDENTIALS_FILE'), ['https://www.googleapis.com/auth/gmail.compose'])
            credentials = flow.run_local_server(port=0)

        with open('token.json', 'w') as token:
            token.write(credentials.to_json())

    service = build('gmail', 'v1', credentials=credentials)

    # Construct the email message
    message = MIMEText(email_content)
    message['to'] = 'recipient@example.com'
    message['subject'] = 'Email Generated by AgentGPT'

    # Save the initial email content to a variable for modification later
    original_email_content = email_content

    # Print the available actions and prompt the user to choose one
    while True:
        action = input("Choose an action - A) send the email, B) modify the email, C) clear the email, D) redisplay the email: ")

        if action.lower() == 'a':
            # Send the email
            create_message = {'raw': base64.urlsafe_b64encode(message.as_bytes()).decode()}
            sent_message = service.users().messages().send(userId="me", body=create_message).execute()
            print("Message sent to %s. Message Id: %s" % (message['to'], sent_message['id']))
            break

        elif action.lower() == 'b':
            # Modify the email
            print("Current email content:\n%s\n" % email_content)
            phrase = input("Enter the phrase to replace: ")
            replacement = input("Enter the replacement phrase: ")
            email_content = re.sub(phrase, replacement, email_content)
            print("Modified email content:\n%s\n" % email_content)

        elif action.lower() == 'c':
            # Delete the email
            print("Email cleared.")
            break
        elif action.lower() == 'd':
            # Display email to console
            print("Current email content:\n%s\n" % email_content)
        else:
            print("Invalid action. Please choose A, B, C, or D.")

