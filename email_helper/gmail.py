from google.oauth2.credentials import Credentials
from email.mime.text import MIMEText
from google_auth_oauthlib.flow import InstalledAppFlow
from googleapiclient.discovery import build
from googleapiclient.errors import HttpError
import os
import config #reads in api key from config.ini file
import openai_helper #openai api function 
import base64


def build_service():
    #credentials creation and GMAIL API service building 
    #define the scopes 
    SCOPES = ['https://mail.google.com/']

    # Read the api_key from config.ini file
    api_key = config.read_api_key()

    # Create credentials and Gmail API service once, before the while loop
    creds = None
    if os.path.exists('token.json'):
        creds = Credentials.from_authorized_user_file('token.json', SCOPES)

    if not creds or not creds.valid:
        if creds and creds.expired and creds.refresh_token:
            creds.refresh(Request())
        else:
            credentials_file = config.get('DEFAULT', 'gmail_cred_file')
            flow = InstalledAppFlow.from_client_secrets_file(credentials_file, SCOPES)
            creds = flow.run_local_server(port=0)

        with open('token.json', 'w') as token:
            token.write(creds.to_json())

    service = build('gmail', 'v1', credentials=creds)
    return api_key, service


def delete_mail(service): 
     #prompt the user for the subject header for which email to delete 
    subjectheader = input("Enter the subject header for email you want to delete: ")
    query = "subject:" + subjectheader
    result = service.users().messages().list(userId='me', q=query).execute()
    messages = result.get('messages', [])

    # delete the email with the chosen subject header
    if not messages:
        print("No emails found with the subject header:", subjectheader)

    else:
        for message in messages:
            message_id = message['id']
            try:
                #service.users().messages().modify(userId='me', id=message_id, body={'removeLabelIds': [], 'addLabelIds': ['TRASH']}).execute()
                #print(f"Moved to trash bin - email with ID: {message_id}")
                service.users().messages().delete(userId='me', id=message_id).execute()

                #service.users().messages().delete(userId='me', id=message_id).execute()
                print(f"Deleted email with ID: {message_id}")
            except HttpError as error:
                print(f"An error occurred while deleting the email with ID: {message_id}")
                print(f"Error: {error}")

        print(f"Deleted {len(messages)} email(s) with the subject header: {subjectheader}")

def write_mail(api_key, service):
    
    prompt = input("Enter a prompt for the email: ")    
    if api_key is None:
        print("API key not found. Please set the 'OPENAI_API_KEY' environment variable.")
        exit(1)

    # Generate initial email content with OpenAI
    email_content = openai_helper.generate_email(prompt, api_key)

    if email_content is None:
        print("Unable to generate email content.")
        exit(1)

    # Print the email content to the console
    print("Generated email content:\n%s\n" % email_content)

    # Construct the email message
    message = MIMEText(email_content)
    
    #message['subject'] = 'Email Generated by AgentGPT'

    # Save the initial email content to a variable for modification later
    original_email_content = email_content

    # Print the available actions and prompt the user to choose one
    while True:
        action = input("Choose an action - A) send the email, B) modify the email, C) clear the email & rewrite, D) redisplay the email, E) Exit to main screen: ")

        if action.lower() == 'a':
            # Set the email content to the modified email_content (if it was modified)
            message.set_payload(payload=email_content)

            print("\nMessage Body: " + str(message.get_payload()))
            #Prompt the user for the subject header 
            subject = input("Enter the subject header: ")
            message['subject'] = subject
            # Prompt the user to enter the email address
            to_address = input("Enter the email address to send the email to: ")
            message['to'] = to_address
            
            # Send the email to the entered email address
            message['to'] = to_address
            create_message = {'raw': base64.urlsafe_b64encode(message.as_bytes('utf-8')).decode()}
            sent_message = service.users().messages().send(userId="me", body=create_message).execute()
            print("Message sent to %s. Message Id: %s" % (to_address, sent_message['id']))
            break

        if action.lower() == 'b':
            # Modify the email
            print("Current email content:\n%s\n" % email_content)

            # Prompt the user to make changes to the email
            suggestedChanges = input("\nWhat would you like to change about this email? ")

            # Regenerate initial email content with user suggested changes 
            # Update the email content with the user's changes
            email_content = openai_helper.generate_email("Take this email: " + email_content + "\n and change it to: " + suggestedChanges, api_key)
            print("Modified email content:\n%s\n" % email_content)



        elif action.lower() == 'c':
        # Regenerate email content
            print("Clearing Email Content")
            prompt = input("Enter a prompt for the email: ")
            email_content = openai_helper.generate_email(prompt, api_key)
            if email_content is None:
                print("Unable to generate email content.")
                exit(1)
            print("New email content:\n%s\n" % email_content)

        elif action.lower() == 'd':
            # Display email to console
            print("Current email content:\n%s\n" % email_content)
        elif action.lower() == 'e':
            # Delete the email
            print("Exiting to main screen")
            break; #reprompts main screen 
        else:
            print("Invalid action. Please choose A, B, C, or D.")

        